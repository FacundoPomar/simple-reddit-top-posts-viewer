{"version":3,"sources":["actions/posts.ts","components/AppNavbar/AppNavbar.tsx","utils/datesUtil.ts","components/PostDetail/PostDetail.tsx","stores/posts.ts","reducers/posts.ts","components/PostItemLayout/PostItemLayout.tsx","components/PostItem/PostItem.tsx","Services/Posts.ts","components/PostItemLoading/PostItemLoading.tsx","components/PostsList/PostsList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PostActionTypes","AppNavbar","onMenuToggle","AppBar","position","Toolbar","IconButton","edge","color","onClick","aria-label","Typography","variant","DatesUtil","date","format","PostDetails","post","Card","CardHeader","avatar","Avatar","author","toUpperCase","title","subheader","getTimeAgo","Date","created_utc","url","CardMedia","media","className","alt","src","controls","width","reddit_video","height","fallback_url","CardContent","postsLoaded","posts","slice","type","POSTS_LOADED","payload","postsLoading","loading","POSTS_LOADING","defaultPostsState","current","postsStore","createStore","actionObj","state","action","postsList","map","id","thumbnail","num_comments","read","POST_SELECTED","selectedPostId","postsCopy","cloneDeep","selectedPost","find","postElem","POST_DISMISSED","postIdToRemove","oldPosts","newPosts","remove","undefined","POSTS_DISMISS_ALL","devToolsEnhancer","PostItemLayout","selected","children","Paper","elevation","defaultProps","PostItem","onDismiss","defaultPostsFetchRequest","limit","raw_json","after","before","PostsService","options","paramsOptions","Object","assign","values","params","keys","key","i","join","this","baseApi","topPosts","fetch","then","response","json","PostItemLoading","Skeleton","animation","PostsList","props","useSelector","currentSlice","dataLoading","useEffect","loadPosts","a","dispatch","postsResponse","data","child","newSlice","isPostSelected","postDismissed","onPostSelection","postSelected","onSelection","length","Button","App","React","useState","open","setOpen","handleDrawerToggle","containerClasses","Drawer","anchor","component","Divider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","StylesProvider","injectFirst","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c1b5c57b.chunk.js","sourcesContent":["import { Post } from \"../models/post\";\n\nexport enum PostActionTypes {\n    POSTS_LOADED = 'postsLoaded',\n    POSTS_LOADING = 'postsLoading',\n    POSTS_DISMISS_ALL = 'postDismissAll',\n    POST_SELECTED = 'postSelected',\n    POST_DISMISSED = 'postDismissed'\n}\n\nexport interface PostAction {\n    type: PostActionTypes\n};\n\nexport interface PostActionLoaded extends PostAction {\n    payload: {\n        posts: Post[],\n        slice: string\n    }\n}\n\nexport interface PostActionLoading  extends PostAction {\n    payload: {\n        loading: boolean\n    }\n}\n\nexport interface PostActionSelected  extends PostAction {\n    payload: {\n        post: Post\n    }\n}\n\nexport interface PostActionDismissed  extends PostAction {\n    payload: {\n        post: Post\n    }\n}\n\nexport const postsLoaded = ( posts: Post[], slice: string ): PostActionLoaded => {\n    return {\n        type: PostActionTypes.POSTS_LOADED,\n        payload: {\n            posts,\n            slice\n        }\n    };\n}\n\nexport const postsLoading = ( loading: boolean ): PostActionLoading => {\n    return {\n        type: PostActionTypes.POSTS_LOADING,\n        payload: {\n            loading\n        }\n    };\n}\n\n\nexport const postsDismissAll = (): PostAction => {\n    return {\n        type: PostActionTypes.POSTS_DISMISS_ALL\n    };\n}\n\nexport const postSelected = ( post: Post ): PostActionSelected => {\n    return {\n        type: PostActionTypes.POST_SELECTED,\n        payload: {\n            post\n        }\n    };\n}\n\nexport const postDismissed = ( post: Post ): PostActionDismissed => {\n    return {\n        type: PostActionTypes.POST_DISMISSED,\n        payload: {\n            post\n        }\n    };\n}\n","import React from 'react';\nimport { AppBar, Toolbar, Typography, IconButton } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nexport interface AppNavbarProps {\n  onMenuToggle: () => void;\n}\n\nconst AppNavbar: React.FC<AppNavbarProps> = ( { onMenuToggle } ) => (\n  <AppBar position='sticky'>\n    <Toolbar>\n      <IconButton\n        edge=\"start\"\n        color=\"inherit\"\n        onClick={onMenuToggle}\n        aria-label=\"togle posts\">\n        <MenuIcon />\n      </IconButton>\n      <Typography variant='h6'>\n        Reddit Top posts\n      </Typography>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default AppNavbar;","import { format } from 'timeago.js';\n\nclass DatesUtil {\n    static getTimeAgo( date: Date ): string {\n        return format( date, 'en_us');\n    }\n};\n\nexport default DatesUtil;","import React from 'react';\nimport { Card, CardHeader, Avatar, CardMedia, CardContent, Typography } from '@material-ui/core';\nimport { Post } from '../../models/post';\nimport DatesUtil from '../../utils/datesUtil';\nimport './PostDetail.scss';\n\nexport interface PostDetailsProps {\n  post?: Post;\n}\n\nconst PostDetails: React.FC<PostDetailsProps> = ( { post } ) => {\n\n  return (\n    <Card>\n      { post &&\n        <>\n          <CardHeader\n            avatar={\n              <Avatar aria-label={post.author}>\n                {post.author[0].toUpperCase()}\n              </Avatar>\n            }\n            title={post.title}\n            subheader={DatesUtil.getTimeAgo( new Date(post.created_utc) )}\n          />\n          { post.url &&\n            <CardMedia title={post.title}>\n              { !post.media &&\n                <img\n                  className='post-detail__image'\n                  alt={post.title}\n                  src={post.url} />\n              }\n              { post.media &&\n                <div className='post-detail__video'>\n                  <video\n                    controls={true}\n                    width={post.media.reddit_video.width}\n                    height={post.media.reddit_video.height}\n                    src={post.media.reddit_video.fallback_url} />\n                </div>\n\n              }\n            </CardMedia>\n          }\n        </>\n      }\n      <CardContent>\n        { !post &&\n          <Typography\n            variant='h3'\n            color='textPrimary'>\n            Choose a Post to checkout its details\n          </Typography>\n        }\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default PostDetails;","import { createStore } from \"redux\";\nimport { postsReducer } from \"../reducers/posts\";\nimport { Post, PostsSlice } from \"../models/post\";\nimport { devToolsEnhancer } from 'redux-devtools-extension/developmentOnly';\n\nexport interface PostsState {\n    posts: Post[];\n    selectedPost?: Post;\n    postsLoading: boolean;\n    slice: PostsSlice;\n}\n\nexport const defaultPostsState: PostsState = {\n    posts: [],\n    postsLoading: false,\n    slice: {\n        current: ''\n    }\n}\n\nconst postsStore = createStore(postsReducer, /* preloadedState, */ devToolsEnhancer( {} ));\n\nexport default postsStore;","import { Reducer } from \"redux\";\nimport { PostsState, defaultPostsState } from \"../stores/posts\";\nimport { PostAction, PostActionTypes, PostActionLoaded, PostActionLoading, PostActionSelected, PostActionDismissed } from \"../actions/posts\";\nimport { PostsSlice, Post } from \"../models/post\";\nimport { cloneDeep, remove } from 'lodash';\n\nexport const postsReducer: Reducer<PostsState, PostAction> =\n  ( state: PostsState = defaultPostsState, action: PostAction ) => {\n\n  let actionObj;\n\n  switch (action.type) {\n    case PostActionTypes.POSTS_LOADED:\n      actionObj = action as PostActionLoaded;\n\n      const slice: PostsSlice = {\n          current: actionObj.payload.slice\n      };\n\n      const postsList = [ ...actionObj.payload.posts ];\n      const posts = postsList.map( ({ author, title, id, thumbnail, created_utc, num_comments, url, media } ) => {\n\n        const post: Post = {\n          author,\n          title,\n          id,\n          thumbnail,\n          created_utc,\n          num_comments,\n          url,\n          media,\n          read: false\n        };\n\n        // Make sure post timestamp is in the right format\n        post.created_utc = post.created_utc * 1000\n\n        return post;\n      });\n\n      return {\n          ...state,\n          posts,\n          slice\n      };\n    case PostActionTypes.POSTS_LOADING:\n      actionObj = action as PostActionLoading;\n      return { ...state, postsLoading: actionObj.payload.loading };\n    case PostActionTypes.POST_SELECTED:\n      actionObj = action as PostActionSelected;\n\n      const selectedPostId = actionObj.payload.post.id;\n      const postsCopy = cloneDeep(state.posts);\n\n      const selectedPost = postsCopy.find( postElem => postElem.id === selectedPostId );\n\n      if ( selectedPost ) {\n        selectedPost.read = true;\n        return { ...state, posts: postsCopy, selectedPost };\n      }\n      return state;\n    case PostActionTypes.POST_DISMISSED:\n      actionObj = action as PostActionDismissed;\n\n      const postIdToRemove = actionObj.payload.post.id;\n      const oldPosts = cloneDeep(state.posts);\n      const newPosts = remove( oldPosts, post => post.id !== postIdToRemove );\n\n      return {\n        ...state,\n        posts: newPosts,\n        selectedPost: undefined\n      };\n    case PostActionTypes.POSTS_DISMISS_ALL:\n      return {\n        ...state,\n        posts: [],\n        selectedPost: undefined\n      }\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport './PostItemLayout.scss';\nimport { Paper } from '@material-ui/core';\n\nexport interface PostItemLayoutProps {\n  selected?: boolean\n}\n\nconst PostItemLayout: React.FC<PostItemLayoutProps> = ( { selected, children } ) => (\n  <Paper\n    className='post-item-layout'\n    elevation={selected ? 24 : 2}>\n    <div className='post-item-layout__inner-container'>\n      { children }\n    </div>\n  </Paper>\n);\n\nPostItemLayout.defaultProps = {\n  selected: false\n};\n\nexport default PostItemLayout;","import React from 'react';\nimport { Post } from '../../models/post';\nimport { Typography } from '@material-ui/core';\nimport './PostItem.scss';\nimport PostItemLayout from '../PostItemLayout/PostItemLayout';\nimport DatesUtil from '../../utils/datesUtil';\nimport NewReleasesIcon from '@material-ui/icons/NewReleases';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\n\nexport interface PostItemProps {\n  post: Post;\n  onClick: () => void;\n  selected?: boolean;\n  onDismiss?: ( post: Post ) => void;\n}\n\nconst PostItem: React.FC<PostItemProps> = ( { selected, post, onClick, onDismiss } ) => {\n  return (\n    <PostItemLayout selected={selected}>\n      <div\n        className='post-item__inner-container'\n        onClick={onClick}>\n        <div className='post-item__info'>\n          <div>\n            <Typography variant='subtitle1'>\n              Title: {post.title}\n            </Typography>\n          </div>\n          <div>\n            <Typography variant='subtitle2'>\n              Author: {post.author}\n            </Typography>\n          </div>\n          <div>\n            <Typography variant='overline'>\n              Entry Date: {DatesUtil.getTimeAgo( new Date(post.created_utc) )}\n            </Typography>\n          </div>\n          <div>\n            <Typography variant='caption'>\n              {post.num_comments} comment/s\n            </Typography>\n          </div>\n          { !post.read &&\n            <div className='post-item__new-post'>\n              <NewReleasesIcon color='secondary'/>\n              <span className='post-item__new-post-label'>\n                New Post !\n              </span>\n            </div>\n          }\n          { onDismiss &&\n            <div className='post-item__dismiss-button'>\n              <HighlightOffIcon onClick={() => {\n                if ( onDismiss ) {\n                  onDismiss( post );\n                }\n              }}/>\n            </div>\n          }\n        </div>\n        {post.thumbnail &&\n          <img\n            className='post-item__thumbnail'\n            width={140}\n            src={post.thumbnail}\n            alt={post.title} />\n        }\n      </div>\n    </PostItemLayout>\n  )\n};\n\nexport default PostItem;","import { Post } from \"../models/post\";\n\nexport interface PostsFetchChild {\n  data: Post;\n}\n\nexport interface PostsFetchResponse {\n  data: {\n    children: PostsFetchChild[];\n    after: string;\n    before: string | null;\n  };\n}\n\nexport interface PostsFetchRequest {\n  limit?: number;\n  raw_json?: number;\n  after?: string;\n  before?: string;\n}\n\nconst defaultPostsFetchRequest: PostsFetchRequest = {\n  limit: 5,\n  raw_json: 1,\n  after: '',\n  before: ''\n}\n\nclass PostsService {\n  static baseApi = 'https://www.reddit.com';\n  static topPosts = '/top.json';\n\n  static async loadPosts( options?: PostsFetchRequest ): Promise<PostsFetchResponse> {\n\n    const paramsOptions = Object.assign( {}, defaultPostsFetchRequest, options );\n\n    // To avoid doing an append for each possible param of the rests, threat all options of the\n    // request as a dynamic list.\n    const values = Object.values( paramsOptions );\n    const params = Object.keys( paramsOptions )\n      .map( ( key: string, i: number ) => `${key}=${values[i]}`)\n      .join('&');\n\n    let url = `${this.baseApi}${this.topPosts}`;\n\n    if ( params ) {\n      url += `?${params}`;\n    }\n\n    return fetch( url )\n      .then( response => response.json() )\n  }\n};\n\nexport default PostsService;","import React from 'react';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport PostItemLayout from '../PostItemLayout/PostItemLayout';\nimport './PostItemLoading.scss';\n\nconst PostItemLoading: React.FC = () => (\n  <PostItemLayout>\n    <div className='post-item-loading'>\n      <div className='post-item-loading__info-container'>\n        <div>\n          <Skeleton\n            animation='wave'\n            variant='text'\n            width='20%'\n            height={40} />\n        </div>\n        <div>\n          <Skeleton\n            animation='wave'\n            variant='text'\n            width='100%'\n            height={40} />\n          <Skeleton\n            animation='wave'\n            variant='text'\n            width='100%'\n            height={40} />\n        </div>\n      </div>\n      <div className='post-item-loading__thumbnail-container'>\n        <Skeleton\n              animation='wave'\n              variant='rect'\n              width='100%'\n              height='100%' />\n      </div>\n    </div>\n  </PostItemLayout>\n);\n\nexport default PostItemLoading;","import React, { useEffect } from 'react';\nimport { Post, PostsSlice } from '../../models/post';\nimport { useSelector } from 'react-redux';\nimport postsStore, { PostsState } from '../../stores/posts';\nimport PostItem from '../PostItem/PostItem';\nimport PostItemLayout from '../PostItemLayout/PostItemLayout';\nimport { Typography, Button } from '@material-ui/core';\nimport { postDismissed, postSelected, postsLoading, postsLoaded, postsDismissAll } from '../../actions/posts';\nimport PostsService, { PostsFetchRequest } from '../../Services/Posts';\nimport './PostsList.scss';\nimport PostItemLoading from '../PostItemLoading/PostItemLoading';\n\nexport interface PostsList {\n  onSelection: ( post: Post ) => void;\n}\n\nconst PostsList: React.FC<PostsList> = ( props ) => {\n  const posts = useSelector<PostsState, Post[]>( state => state.posts );\n  const selectedPost = useSelector<PostsState, Post | undefined>( state => state.selectedPost );\n  const currentSlice = useSelector<PostsState, PostsSlice>( state => state.slice );\n  const dataLoading = useSelector<PostsState, boolean>( state => state.postsLoading );\n\n  useEffect( () => {\n    loadPosts();\n  }, []);\n\n  const loadPosts = async ( options?: PostsFetchRequest ) => {\n    postsStore.dispatch( postsLoading( true ) );\n\n    const postsResponse = await PostsService.loadPosts( options );\n\n    const posts = postsResponse.data.children.map( child => child.data );\n    const newSlice = postsResponse.data.after || '';\n\n    postsStore.dispatch( postsLoaded( posts, newSlice ) );\n\n    postsStore.dispatch( postsLoading( false ) );\n  };\n\n  const onPrev = () => {\n    loadPosts({\n      before: currentSlice.current\n    });\n  };\n\n  const onNext = () => {\n    loadPosts({\n      after: currentSlice.current\n    });\n  };\n\n  const isPostSelected = ( post: Post ): boolean => {\n    return post.id === selectedPost?.id;\n  };\n\n  const onDismiss = ( post: Post ) => {\n    postsStore.dispatch( postDismissed( post ) );\n  };\n\n  const onPostSelection = ( post: Post ): void => {\n    postsStore.dispatch( postSelected( post ) );\n    props.onSelection( post );\n  }\n\n  const onDismissAll = (): void => {\n    postsStore.dispatch( postsDismissAll() );\n  }\n\n  return (\n    <>\n      { (!posts.length && !dataLoading) &&\n        <PostItemLayout>\n          <Typography variant='subtitle1'>\n            No posts to show.\n          </Typography>\n        </PostItemLayout>\n      }\n      { dataLoading &&\n        <>\n          <PostItemLoading />\n          <PostItemLoading />\n          <PostItemLoading />\n        </>\n          }\n      { !dataLoading && posts.map( post =>\n        <PostItem\n          key={post.id}\n          selected={isPostSelected( post )}\n          onClick={(): void => {\n            onPostSelection( post );\n          }}\n          onDismiss={(): void => {\n            onDismiss( post );\n          }}\n          post={post} />\n      )}\n      <PostItemLayout>\n        <div className='posts-list__posts-pagination'>\n          <Button\n            variant='contained'\n            color='secondary'\n            onClick={onPrev}>\n            Prev\n          </Button>\n          { posts.length ?\n            <Button\n              variant='contained'\n              color='secondary'\n              onClick={onDismissAll}>\n              Dismiss All\n            </Button>\n            : null\n          }\n          <Button\n            variant='contained'\n            color='secondary'\n            onClick={onNext}>\n            Next\n          </Button>\n        </div>\n      </PostItemLayout>\n    </>\n  );\n};\n\nexport default PostsList;","import React from 'react';\nimport './App.scss';\nimport { useSelector } from 'react-redux';\nimport { PostsState } from './stores/posts';\nimport AppNavbar from './components/AppNavbar/AppNavbar';\nimport { Post } from './models/post';\nimport PostDetails from './components/PostDetail/PostDetail';\nimport { Drawer, IconButton, Divider, Typography } from '@material-ui/core';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport PostsList from './components/PostsList/PostsList';\n\nconst App: React.FC = () => {\n  const selectedPost = useSelector<PostsState, Post | undefined>( state => state.selectedPost );\n  const [open, setOpen] = React.useState(true);\n\n  const handleDrawerToggle = () => {\n    setOpen( !open );\n  };\n\n  const onPostSelection = () => {\n    setOpen( false );\n  };\n\n  let containerClasses = 'app__container';\n\n  containerClasses += open ? ' app__container--sidenav-opened' : '';\n\n  return (\n    <div className={containerClasses}>\n      <AppNavbar onMenuToggle={handleDrawerToggle}/>\n      <Drawer\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        className='app__drawer'>\n        <div className='app__posts-container'>\n          <div className='app__posts-container-title'>\n            <IconButton onClick={handleDrawerToggle}>\n              <ChevronLeftIcon />\n            </IconButton>\n            <Typography\n              variant='subtitle1'\n              component='span'>\n              Checkout Your Top Posts!\n            </Typography>\n          </div>\n          <Divider />\n          <Divider />\n          <PostsList onSelection={onPostSelection}/>\n        </div>\n      </Drawer>\n      <div className='app__inner-container'>\n        <div className='app__post-detail-container'>\n          <PostDetails post={selectedPost}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'fontsource-roboto';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport postsStore from './stores/posts';\nimport { StylesProvider } from '@material-ui/core';\n\nReactDOM.render(\n  <React.StrictMode>\n      <StylesProvider injectFirst>\n        <Provider store={postsStore}>\n          <App />\n        </Provider>\n      </StylesProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}